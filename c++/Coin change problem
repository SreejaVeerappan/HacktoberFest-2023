#include <bits/stdc++.h>
using namespace std;

const int MAX = INT_MAX;

int solve(vector<int>& coins, int x) {
    if (x == 0) {
        return 0;
    }
    if (x < 0) {
        return MAX;
    }

    int mini = MAX;
    for (int i = 0; i < coins.size(); i++) {
        int ans = solve(coins, x - coins[i]);
        if (ans != MAX) {
            mini = min(mini, 1 + ans);
        }
    }
    return mini;
}

int minimumElements(vector<int>& coins, int x) {
    int ans = solve(coins, x);
    if (ans == MAX) {
        return -1;
    }
    return ans;
}

int solvemem(vector<int>& coins, int x, vector<int>& dp) {
    if (x == 0) {
        return 0;
    }
    if (x < 0) {
        return MAX;
    }
    if (dp[x] != -1) {
        return dp[x];
    }

    int mini = MAX;
    for (int i = 0; i < coins.size(); i++) {
        int ans = solvemem(coins, x - coins[i], dp);
        if (ans != MAX) {
            mini = min(mini, 1 + ans);
        }
    }
    dp[x] = mini;
    return dp[x];
}

int minimumElementsMemoized(vector<int>& coins, int x) {
    vector<int> dp(x + 1, -1);
    int ans = solvemem(coins, x, dp);
    if (ans == MAX) {
        return -1;
    }
    return ans;
}

int solvetab(vector<int>& coins, int x) {
    vector<int> dp(x + 1, MAX);
    dp[0] = 0;

    for (int i = 1; i <= x; i++) {
        for (int j = 0; j < coins.size(); j++) {
            if (i - coins[j] >= 0 && dp[i - coins[j]] != MAX) {
                dp[i] = min(dp[i], 1 + dp[i - coins[j]]);
                if (dp[i] == 1) {
                    break; // If dp[i] becomes 1, no further iterations are needed
                }
            }
        }
    }

    if (dp[x] == MAX) {
        return -1;
    }
    return dp[x];
}

int minimumElementsTabulation(vector<int>& coins, int x) {
    return solvetab(coins, x);
}

int main() {
    vector<int> coins = {1, 2, 3}; // Example input vector
    int x = 5; // Example value of x

    int resultRecursive = minimumElements(coins, x);
    cout << "Minimum number of elements required to form " << x << " using recursion: " << resultRecursive << endl;

    int resultMemoized = minimumElementsMemoized(coins, x);
    cout << "Minimum number of elements required to form " << x << " using recursion with memoization: " << resultMemoized << endl;

    int resultTabulation = minimumElementsTabulation(coins, x);
    cout << "Minimum number of elements required to form " << x << " using tabulation: " << resultTabulation << endl;

    return 0;
}
