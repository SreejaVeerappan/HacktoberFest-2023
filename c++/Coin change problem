#include <iostream>
#include <vector>
#include <climits>  // For INT_MAX
using namespace std;

// Function to find the minimum number of coins needed for a given amount
int coinChange(vector<int>& coins, int amount) {
    // Create a dp array to store the minimum coins for each amount up to the given amount
    vector<int> dp(amount + 1, INT_MAX);

    // Base case: 0 coins are needed to make the amount 0
    dp[0] = 0;

    // Iterate over each coin
    for (int coin : coins) {
        // For each coin, update the dp array for all amounts >= coin
        for (int i = coin; i <= amount; i++) {
            if (dp[i - coin] != INT_MAX) {
                dp[i] = min(dp[i], dp[i - coin] + 1);
            }
        }
    }

    // If dp[amount] is still INT_MAX, it means we cannot make the amount with the given coins
    return dp[amount] == INT_MAX ? -1 : dp[amount];
}

int main() {
    // Example coin denominations
    vector<int> coins = {1, 2, 5};

    // The amount to make
    int amount = 11;

    // Calculate the minimum number of coins needed
    int result = coinChange(coins, amount);

    if (result != -1) {
        cout << "Minimum coins required: " << result << endl;
    } else {
        cout << "The amount cannot be made with the given coins." << endl;
    }

    return 0;
}
